plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'com.gradleup.shadow' version '8.3.8' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'

    base {
        archivesName = "$rootProject.archives_name-$project.name-$rootProject.minecraft_version"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        // withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    jar {
        manifest {
            attributes([
                'Specification-Title'     : rootProject.archives_name,
                'Specification-Vendor'    : 'luavixen',
                'Specification-Version'   : '1',
                'Implementation-Title'    : 'Loading Backgrounds',
                'Implementation-Version'  : rootProject.mod_version,
                'Implementation-Vendor'   : 'luavixen',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    processResources {
        filesMatching(['fabric.mod.json', 'META-INF/mods.toml', 'META-INF/*.mods.toml']) {
            expand([
                'version': rootProject.mod_version,
                'minecraft_version': rootProject.minecraft_version,
                'minecraft_version_min': rootProject.minecraft_version_min,
                'minecraft_version_max': rootProject.minecraft_version_max,
                'minecraft_version_semver': rootProject.minecraft_version_semver,
            ])
        }
    }
}
